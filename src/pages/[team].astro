---
import Layout from "../layouts/Layout.astro";
import teams from "../data/teams.json";
import "../styles/global.css";

export const prerender = true;
export async function getStaticPaths() {
  return teams.map((t) => ({ params: { team: t.slug } }));
}

const { params, site } = Astro;
const slug = params.team;
const team = teams.find((t) => t.slug === slug);

if (!team) {
  Astro.response.status = 404;
}

let data: any = null;
let error = null;
let apiUrlString = "";

if (team) {
  const apiUrl = new URL("https://statsapi.mlb.com/api/v1/schedule");
  apiUrl.searchParams.set("sportId", "1");
  apiUrl.searchParams.set("teamId", String(team.id));
  // Fetch a window of upcoming games to determine the next home game
  const todayIso = new Date().toISOString().slice(0, 10);
  const end = new Date();
  end.setDate(end.getDate() + 90);
  const endIso = end.toISOString().slice(0, 10);
  apiUrl.searchParams.set("startDate", todayIso);
  apiUrl.searchParams.set("endDate", endIso);
  apiUrlString = apiUrl.toString();

  try {
    const res = await fetch(apiUrlString, { headers: { accept: "application/json" } });
    if (!res.ok) {
      error = `API error: ${res.status}`;
    } else {
      data = await res.json();
    }
  } catch (e) {
    error = e instanceof Error ? e.message : String(e);
  }
}

type ApiTeamRef = { id?: number; name?: string };
type ApiGameTeams = { home?: { team?: ApiTeamRef }; away?: { team?: ApiTeamRef } };
type ApiVenue = { name?: string };
type ApiGame = { teams?: ApiGameTeams; gameDate?: string; venue?: ApiVenue };
type ApiDate = { date?: string; games?: ApiGame[] };

const dates: ApiDate[] = (data?.dates ?? []) as ApiDate[];
const games: ApiGame[] = dates.flatMap((d: ApiDate) => d.games ?? []);

// For "today" evaluation, narrow to games occurring on today's date
const todayIso = new Date().toISOString().slice(0, 10);
const gamesToday = games.filter((g: ApiGame) => {
  const iso = g?.gameDate ? new Date(g.gameDate).toISOString().slice(0, 10) : undefined;
  return iso === todayIso;
});
const homeGamesToday = gamesToday.filter((g: ApiGame) => g?.teams?.home?.team?.id === team?.id);
const awayGamesToday = gamesToday.filter((g: ApiGame) => g?.teams?.away?.team?.id === team?.id);

// Determine the next upcoming home game (including today if later)
const upcomingHomeGames = games
  .filter((g: ApiGame) => g?.teams?.home?.team?.id === team?.id && g?.gameDate)
  .sort((a: ApiGame, b: ApiGame) => new Date(a.gameDate as string).getTime() - new Date(b.gameDate as string).getTime());
const nowTs = Date.now();
const nextHomeGame = upcomingHomeGames.find((g: ApiGame) => new Date(g.gameDate as string).getTime() >= nowTs);

function formatTime(iso: string) {
  try {
    return new Date(iso).toLocaleString(undefined, { dateStyle: "medium", timeStyle: "short" });
  } catch {
    return iso;
  }
}

// Always show today's date at the top of the page
const pageDateIso = todayIso;
function formatDateIsoToLong(isoDate: string) {
  try {
    return new Date(isoDate + "T00:00:00").toLocaleDateString(undefined, { dateStyle: "full" });
  } catch {
    return isoDate;
  }
}
const pageDateLabel = formatDateIsoToLong(pageDateIso);
const siteName = "homegame.today";
const teamName = team?.name ?? "Team";
const answer = team ? (homeGamesToday.length > 0 ? "Yes" : "No") : "";
const teamTimeZone = (team as any)?.timezone as string | undefined;
const nextHomeText = nextHomeGame?.gameDate
  ? (() => {
      const dt = new Date(nextHomeGame.gameDate);
      const datePart = dt.toLocaleDateString(undefined, { dateStyle: "medium", timeZone: teamTimeZone });
      const timePart = dt.toLocaleTimeString(undefined, { timeStyle: "short", timeZone: teamTimeZone });
      return `No, next game at ${team?.venue ?? "their stadium"} will be on ${datePart} at ${timePart}.`;
    })()
  : `No, next game at ${team?.venue ?? "their stadium"} is not yet scheduled.`;
const subtextMsg = team
  ? homeGamesToday.length > 0
    ? (() => {
        const dtIso = (homeGamesToday[0] as any)?.gameDate as string | undefined;
        if (!dtIso) return `Yes, game at ${team?.venue ?? "their stadium"} today.`;
        const dt = new Date(dtIso);
        const timePart = dt.toLocaleTimeString(undefined, { timeStyle: "short", timeZone: teamTimeZone });
        return `Yes, game at ${team?.venue ?? "their stadium"} today at ${timePart}.`;
      })()
    : nextHomeText
  : "";
const pageTitle = team
  ? `${teamName} — ${answer} home game today? | ${siteName}`
  : `Team not found | ${siteName}`;
const pageDescription = team
  ? `Is there a ${teamName} home game on ${pageDateLabel}? ${answer}. ${subtextMsg}`
  : "Team not found.";
const canonical = site ? new URL(`/${slug}`, site).toString() : `/${slug}`;
// Use dated OG image filename to bust social caches, using team-local date
const ogDateKey = (() => {
  try {
    return new Intl.DateTimeFormat("en-CA", {
      timeZone: teamTimeZone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    }).format(new Date());
  } catch {
    return new Date().toISOString().slice(0, 10);
  }
})();
const ogImage = site ? new URL(`/og/${slug}-${ogDateKey}.png`, site).toString() : `/og/${slug}-${ogDateKey}.png`;

// JSON-LD SportsEvent structured data for today’s game (home preferred, otherwise away)
const selectedGame: ApiGame | undefined = (homeGamesToday[0] ?? awayGamesToday[0]) as ApiGame | undefined;
const isHome = !!homeGamesToday[0];
const opponentName = selectedGame
  ? isHome
    ? selectedGame?.teams?.away?.team?.name
    : selectedGame?.teams?.home?.team?.name
  : undefined;
const gameStartIso =
  selectedGame?.gameDate ?? (pageDateIso ? `${pageDateIso}T00:00:00Z` : undefined);

let jsonLd: any = null;
if (selectedGame && gameStartIso) {
  jsonLd = {
    "@context": "https://schema.org",
    "@type": "SportsEvent",
    name: isHome
      ? `${teamName} vs ${opponentName ?? "Opponent"}`
      : `${opponentName ?? "Opponent"} vs ${teamName}`,
    sport: "Baseball",
    startDate: gameStartIso,
    eventAttendanceMode: "https://schema.org/OfflineEventAttendanceMode",
    homeTeam: {
      "@type": "SportsTeam",
      name: isHome ? teamName : (selectedGame?.teams?.home?.team?.name ?? "Home Team"),
    },
    awayTeam: {
      "@type": "SportsTeam",
      name: isHome ? (selectedGame?.teams?.away?.team?.name ?? "Away Team") : teamName,
    },
  };
  if (isHome && team?.venue) {
    jsonLd.location = { "@type": "Place", name: team.venue };
  }
}
---

<Layout
  title={pageTitle}
  description={pageDescription}
  canonical={canonical}
  themeColor={team?.colors?.[0]}
  bgColor={team?.colors?.[0]}
  fgColor={(team?.colors?.[0] ?? "#ffffff").toLowerCase() === "#000000" ? "#ffffff" : "#ffffff"}
  ogImage={ogImage}
>
  {
    !team ? (
      <>
        <h1>Team not found</h1>
        <p>
          <a href="/">Home</a>
        </p>
      </>
    ) : error ? (
      <>
        <h1>{team.name}</h1>
        <p>Unable to load schedule.</p>
        <p>
          <a href="/">Home</a>
        </p>
      </>
    ) : (
      <>
        {jsonLd && <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />}
        <div class="h-dvh grid place-items-center text-center">
          <time class="text-[clamp(1rem,2.5vw,2rem)] opacity-90" datetime={pageDateIso}>
            {pageDateLabel}
          </time>
          <div class="text-[clamp(6rem,18vw,18rem)] font-extrabold tracking-tight leading-none">{homeGamesToday.length > 0 ? "Yes" : "No"}</div>
          <div class="text-[clamp(1rem,2.5vw,2rem)] opacity-90">{subtextMsg}</div>
        </div>
      </>
    )
  }
</Layout>
